package com.thekeeperofpie.artistalleydatabase.cds.data

import com.ionspin.kotlin.bignum.decimal.BigDecimal
import com.thekeeperofpie.artistalleydatabase.entry.EntrySection
import com.thekeeperofpie.artistalleydatabase.vgmdb.album.DiscEntry
import kotlinx.datetime.Instant

data class CdEntryModel(
    val id: String,
    val catalogId: EntrySection.MultiText.Entry,
    val titles: List<EntrySection.MultiText.Entry>,
    val performers: List<EntrySection.MultiText.Entry>,
    val composers: List<EntrySection.MultiText.Entry>,
    val series: List<EntrySection.MultiText.Entry>,
    val characters: List<EntrySection.MultiText.Entry>,
    val discs: List<DiscEntry>,
    val tags: List<EntrySection.MultiText.Entry>,
    val price: BigDecimal?,
    val lastEditTime: Instant?,
    val imageWidth: Int?,
    val imageHeight: Int?,
    val notes: String?,
    val catalogIdLocked: EntrySection.LockState?,
    val titlesLocked: EntrySection.LockState?,
    val performersLocked: EntrySection.LockState?,
    val composersLocked: EntrySection.LockState?,
    val seriesLocked: EntrySection.LockState?,
    val charactersLocked: EntrySection.LockState?,
    val discsLocked: EntrySection.LockState?,
    val tagsLocked: EntrySection.LockState?,
    val priceLocked: EntrySection.LockState?,
    val notesLocked: EntrySection.LockState?,
) {
    constructor(
        entry: CdEntry,
        catalogId: EntrySection.MultiText.Entry,
        titles: List<EntrySection.MultiText.Entry>,
        performers: List<EntrySection.MultiText.Entry>,
        composers: List<EntrySection.MultiText.Entry>,
        series: List<EntrySection.MultiText.Entry>,
        characters: List<EntrySection.MultiText.Entry>,
        discs: List<DiscEntry>,
        tags: List<EntrySection.MultiText.Entry>,
    ) : this(
        id = entry.id,
        catalogId = catalogId,
        titles = titles,
        performers = performers,
        composers = composers,
        series = series,
        characters = characters,
        discs = discs,
        tags = tags,
        price = entry.price,
        lastEditTime = entry.lastEditTime,
        imageWidth = entry.imageWidth,
        imageHeight = entry.imageHeight,
        notes = entry.notes,
        catalogIdLocked = EntrySection.LockState.from(entry.locks.catalogIdLocked),
        titlesLocked = EntrySection.LockState.from(entry.locks.titlesLocked),
        performersLocked = EntrySection.LockState.from(entry.locks.performersLocked),
        composersLocked = EntrySection.LockState.from(entry.locks.composersLocked),
        seriesLocked = EntrySection.LockState.from(entry.locks.seriesLocked),
        charactersLocked = EntrySection.LockState.from(entry.locks.charactersLocked),
        discsLocked = EntrySection.LockState.from(entry.locks.discsLocked),
        tagsLocked = EntrySection.LockState.from(entry.locks.tagsLocked),
        priceLocked = EntrySection.LockState.from(entry.locks.priceLocked),
        notesLocked = EntrySection.LockState.from(entry.locks.notesLocked),
    )
}
