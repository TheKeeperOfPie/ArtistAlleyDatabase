import kotlin.Boolean;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE
    IF NOT EXISTS `artistEntry` (
        `id` TEXT NOT NULL,
        `booth` TEXT NOT NULL COLLATE NOCASE,
        `name` TEXT NOT NULL COLLATE NOCASE,
        `summary` TEXT,
        `links` TEXT AS List<String> NOT NULL,
        `storeLinks` TEXT AS List<String> NOT NULL DEFAULT '',
        `catalogLinks` TEXT AS List<String> NOT NULL DEFAULT '',
        `driveLink` TEXT,
        `favorite` INTEGER AS Boolean NOT NULL,
        `ignored` INTEGER AS Boolean NOT NULL,
        `notes` TEXT,
        `seriesInferred` TEXT AS List<String> NOT NULL,
        `seriesConfirmed` TEXT AS List<String> NOT NULL,
        `merchInferred` TEXT AS List<String> NOT NULL,
        `merchConfirmed` TEXT AS List<String> NOT NULL,
        `counter` INTEGER NOT NULL DEFAULT 1,
        PRIMARY KEY (`id`)
    );

CREATE VIRTUAL TABLE IF NOT EXISTS `artistEntry_fts` USING FTS4 (
    `id` TEXT NOT NULL,
    `booth` TEXT NOT NULL COLLATE NOCASE,
    `name` TEXT NOT NULL COLLATE NOCASE,
    `summary` TEXT,
    `links` TEXT AS List<String> NOT NULL,
    `storeLinks` TEXT AS List<String> NOT NULL,
    `catalogLinks` TEXT AS List<String> NOT NULL,
    `driveLink` TEXT,
    `favorite` INTEGER AS Boolean NOT NULL,
    `ignored` INTEGER AS Boolean NOT NULL,
    `notes` TEXT,
    `seriesInferred` TEXT AS List<String> NOT NULL,
    `seriesConfirmed` TEXT AS List<String> NOT NULL,
    `merchInferred` TEXT AS List<String> NOT NULL,
    `merchConfirmed` TEXT AS List<String> NOT NULL,
    content=`artistEntry`
);

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_artistEntry_fts_BEFORE_UPDATE BEFORE
UPDATE ON `artistEntry` BEGIN
DELETE FROM `artistEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_artistEntry_fts_BEFORE_DELETE BEFORE DELETE ON `artistEntry` BEGIN
DELETE FROM `artistEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_artistEntry_fts_AFTER_UPDATE AFTER
UPDATE ON `artistEntry` BEGIN
INSERT INTO
    `artistEntry_fts` (
        `docid`,
        `id`,
        `booth`,
        `name`,
        `summary`,
        `links`,
        `storeLinks`,
        `catalogLinks`,
        `driveLink`,
        `favorite`,
        `ignored`,
        `notes`,
        `seriesInferred`,
        `seriesConfirmed`,
        `merchInferred`,
        `merchConfirmed`
    )
VALUES
    (
        new.`rowid`,
        new.`id`,
        new.`booth`,
        new.`name`,
        new.`summary`,
        new.`links`,
        new.`storeLinks`,
        new.`catalogLinks`,
        new.`driveLink`,
        new.`favorite`,
        new.`ignored`,
        new.`notes`,
        new.`seriesInferred`,
        new.`seriesConfirmed`,
        new.`merchInferred`,
        new.`merchConfirmed`
    );

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_artistEntry_fts_AFTER_INSERT AFTER INSERT ON `artistEntry` BEGIN
INSERT INTO
    `artistEntry_fts` (
        `docid`,
        `id`,
        `booth`,
        `name`,
        `summary`,
        `links`,
        `storeLinks`,
        `catalogLinks`,
        `driveLink`,
        `favorite`,
        `ignored`,
        `notes`,
        `seriesInferred`,
        `seriesConfirmed`,
        `merchInferred`,
        `merchConfirmed`
    )
VALUES
    (
        new.`rowid`,
        new.`id`,
        new.`booth`,
        new.`name`,
        new.`summary`,
        new.`links`,
        new.`storeLinks`,
        new.`catalogLinks`,
        new.`driveLink`,
        new.`favorite`,
        new.`ignored`,
        new.`notes`,
        new.`seriesInferred`,
        new.`seriesConfirmed`,
        new.`merchInferred`,
        new.`merchConfirmed`
    );

END;

CREATE TABLE
    IF NOT EXISTS `artistSeriesConnection` (
        `artistId` TEXT NOT NULL,
        `seriesId` TEXT NOT NULL,
        `confirmed` INTEGER AS Boolean NOT NULL DEFAULT 0,
        PRIMARY KEY (`artistId`, `seriesId`)
    );

CREATE TABLE
    IF NOT EXISTS `artistMerchConnection` (
        `artistId` TEXT NOT NULL,
        `merchId` TEXT NOT NULL,
        `confirmed` INTEGER AS Boolean NOT NULL DEFAULT 0,
        PRIMARY KEY (`artistId`, `merchId`)
    );

CREATE TABLE
    IF NOT EXISTS `stampRallyEntry` (
        `id` TEXT NOT NULL,
        `fandom` TEXT NOT NULL COLLATE NOCASE,
        `hostTable` TEXT NOT NULL COLLATE NOCASE,
        `tables` TEXT AS List<String> NOT NULL,
        `links` TEXT AS List<String> NOT NULL,
        `tableMin` INTEGER,
        `totalCost` INTEGER,
        `prizeLimit` INTEGER,
        `favorite` INTEGER AS Boolean NOT NULL,
        `ignored` INTEGER AS Boolean NOT NULL,
        `notes` TEXT,
        `counter` INTEGER NOT NULL DEFAULT 1,
        PRIMARY KEY (`id`)
    );

CREATE VIRTUAL TABLE IF NOT EXISTS `stampRallyEntry_fts` USING FTS4 (
    `id` TEXT NOT NULL,
    `fandom` TEXT NOT NULL COLLATE NOCASE,
    `hostTable` TEXT NOT NULL COLLATE NOCASE,
    `tables` TEXT AS List<String> NOT NULL,
    `links` TEXT AS List<String> NOT NULL,
    `tableMin` INTEGER,
    `totalCost` INTEGER,
    `prizeLimit` INTEGER,
    `favorite` INTEGER AS Boolean NOT NULL,
    `ignored` INTEGER AS Boolean NOT NULL,
    `notes` TEXT,
    content=`stampRallyEntry`
);

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_stampRallyEntry_fts_BEFORE_UPDATE BEFORE
UPDATE ON `stampRallyEntry` BEGIN
DELETE FROM `stampRallyEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_stampRallyEntry_fts_BEFORE_DELETE BEFORE DELETE ON `stampRallyEntry` BEGIN
DELETE FROM `stampRallyEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_stampRallyEntry_fts_AFTER_UPDATE AFTER
UPDATE ON `stampRallyEntry` BEGIN
INSERT INTO
    `stampRallyEntry_fts` (
        `docid`,
        `id`,
        `fandom`,
        `hostTable`,
        `tables`,
        `links`,
        `tableMin`,
        `totalCost`,
        `prizeLimit`,
        `favorite`,
        `ignored`,
        `notes`
    )
VALUES
    (
        new.`rowid`,
        new.`id`,
        new.`fandom`,
        new.`hostTable`,
        new.`tables`,
        new.`links`,
        new.`tableMin`,
        new.`totalCost`,
        new.`prizeLimit`,
        new.`favorite`,
        new.`ignored`,
        new.`notes`
    );

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_stampRallyEntry_fts_AFTER_INSERT AFTER INSERT ON `stampRallyEntry` BEGIN
INSERT INTO
    `stampRallyEntry_fts` (
        `docid`,
        `id`,
        `fandom`,
        `hostTable`,
        `tables`,
        `links`,
        `tableMin`,
        `totalCost`,
        `prizeLimit`,
        `favorite`,
        `ignored`,
        `notes`
    )
VALUES
    (
        new.`rowid`,
        new.`id`,
        new.`fandom`,
        new.`hostTable`,
        new.`tables`,
        new.`links`,
        new.`tableMin`,
        new.`totalCost`,
        new.`prizeLimit`,
        new.`favorite`,
        new.`ignored`,
        new.`notes`
    );

END;

CREATE TABLE
    IF NOT EXISTS `stampRallyArtistConnection` (
        `stampRallyId` TEXT NOT NULL,
        `artistId` TEXT NOT NULL,
        PRIMARY KEY (`stampRallyId`, `artistId`)
    );

CREATE INDEX IF NOT EXISTS `index_stampRallyArtistConnection_artistId` ON `stampRallyArtistConnection` (`artistId`);

CREATE TABLE
    IF NOT EXISTS `seriesEntry` (
        `name` TEXT NOT NULL COLLATE NOCASE,
        `notes` TEXT,
        PRIMARY KEY (`name`)
    );

CREATE VIRTUAL TABLE IF NOT EXISTS `seriesEntry_fts` USING FTS4 (
    `name` TEXT NOT NULL COLLATE NOCASE,
    `notes` TEXT,
    content=`seriesEntry`
);

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_seriesEntry_fts_BEFORE_UPDATE BEFORE
UPDATE ON `seriesEntry` BEGIN
DELETE FROM `seriesEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_seriesEntry_fts_BEFORE_DELETE BEFORE DELETE ON `seriesEntry` BEGIN
DELETE FROM `seriesEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_seriesEntry_fts_AFTER_UPDATE AFTER
UPDATE ON `seriesEntry` BEGIN
INSERT INTO
    `seriesEntry_fts` (`docid`, `name`, `notes`)
VALUES
    (new.`rowid`, new.`name`, new.`notes`);

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_seriesEntry_fts_AFTER_INSERT AFTER INSERT ON `seriesEntry` BEGIN
INSERT INTO
    `seriesEntry_fts` (`docid`, `name`, `notes`)
VALUES
    (new.`rowid`, new.`name`, new.`notes`);

END;

CREATE TABLE
    IF NOT EXISTS `merchEntry` (
        `name` TEXT NOT NULL,
        `notes` TEXT,
        PRIMARY KEY (`name`)
    );

CREATE VIRTUAL TABLE IF NOT EXISTS `merchEntry_fts` USING FTS4 (
    `name` TEXT NOT NULL COLLATE NOCASE,
    `notes` TEXT,
    content=`merchEntry`
);

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_merchEntry_fts_BEFORE_UPDATE BEFORE
UPDATE ON `merchEntry` BEGIN
DELETE FROM `merchEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_merchEntry_fts_BEFORE_DELETE BEFORE DELETE ON `merchEntry` BEGIN
DELETE FROM `merchEntry_fts`
WHERE
    `docid` = old.`rowid`;

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_merchEntry_fts_AFTER_UPDATE AFTER
UPDATE ON `merchEntry` BEGIN
INSERT INTO
    `merchEntry_fts` (`docid`, `name`, `notes`)
VALUES
    (new.`rowid`, new.`name`, new.`notes`);

END;

CREATE TRIGGER IF NOT EXISTS room_fts_content_sync_merchEntry_fts_AFTER_INSERT AFTER INSERT ON `merchEntry` BEGIN
INSERT INTO
    `merchEntry_fts` (`docid`, `name`, `notes`)
VALUES
    (new.`rowid`, new.`name`, new.`notes`);

END;
